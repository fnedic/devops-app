name: CI

# ────────────────────────────────────────────────
#  Disparadores
# ────────────────────────────────────────────────
on:
  push:
    branches:
      - main
      - developer
      - 'developer-*'
  pull_request:
    branches:
      - main
      - developer

# ────────────────────────────────────────────────
#  1) Build & Tests  (se ejecuta SIEMPRE)
# ────────────────────────────────────────────────
jobs:
  build-test:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout del código
      - uses: actions/checkout@v4

      # 2. Caches (Maven y npm)  ──────────────────
      - uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: maven-${{ hashFiles('backend/pom.xml') }}
          restore-keys: |
            maven-
      - uses: actions/cache@v4
        with:
          path: ~/.npm
          key: npm-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            npm-

      # 3. Entornos (Java 17 & Node 20) ───────────
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
          cache: maven

      # 4. Frontend: instalar, lint y build ──────
      - name: Install frontend deps
        working-directory: frontend
        run: npm ci

      - name: Lint & build frontend
        working-directory: frontend
        run: |
          npm run lint --if-present
          npm run build

      # 5. Backend: tests JUnit / Mockito ─────────
      - name: Backend tests
        working-directory: backend
        run: ./mvnw -B test

# ────────────────────────────────────────────────
#  2) Publicar imágenes  (solo develop & main)
# ────────────────────────────────────────────────
  publish-docker:
    needs: build-test
    if: github.ref == 'refs/heads/developer' || github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    env:
      # Cambia REGISTRY + nombres si prefieres Docker Hub
      REGISTRY: ghcr.io
      IMAGE_FRONT: ${{ github.repository }}-frontend
      IMAGE_BACK:  ${{ github.repository }}-backend

    steps:
      - uses: actions/checkout@v4

      # Buildx & QEMU para multi‑arch (opcional, pero rápido)
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3

      # Login al registro (usa secrets de repo)
      - name: Login to registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.REGISTRY_USER }}
          password: ${{ secrets.REGISTRY_TOKEN }}

      # Imagen del frontend
      - name: Build & push frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          # tag SHA para trazabilidad; agrega ":latest" si es main
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_FRONT }}:${{ github.sha }}
          platforms: linux/amd64

      # Imagen del backend
      - name: Build & push backend
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_BACK }}:${{ github.sha }}
          platforms: linux/amd64
